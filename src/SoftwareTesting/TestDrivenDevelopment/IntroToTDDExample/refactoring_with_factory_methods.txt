
- Suppose we had some tests that creates an object the same way (e.g. calling the constructor directly).
- this leads to a lot of duplicate object construct code, especially for a large test suite; and also
object construction code that is tightly coupled with the test code itself.

public class ShoppingBasketTest {

    @Test
    public void totalOfEmptyBasket() {
        ShoppingBasket basket = new ShoppingBasket(new ArrayList<>());
        assertEquals(0.0, basket.getTotal(), 0.0);
    }

    @Test
    public void totalOfSingleItem() {
        ShoppingBasket basket = new ShoppingBasket(Arrays.asList(new Item(100.0, 1)));
        assertEquals(100.0, basket.getTotal(), 0.0);
    }
}

- Instead, let's create a shared factory method to construct ShoppingBaskets -- more formally, it's a builder.
- We want to avoid duplicating dependencies between the test code and the class under test.
- Essentially, this factory method DECOUPLES the test code from my ShoppingBasket constructor.

public class ShoppingBasketTest {

    public ShoppingBasket buildBasketWithItems(List<Item> shoppingBasketItems) {
        return new ShoppingBasket(shoppingBasketItems);
    }

    // These are the simplest test cases I could come up with...
    @Test
    public void totalOfEmptyBasket() {
        ShoppingBasket basket = buildBasketWithItems(new ArrayList<>());
        assertEquals(0.0, basket.getTotal(), 0.0);
    }

    @Test
    public void totalOfSingleItem() {
        ShoppingBasket basket = buildBasketWithItems(Arrays.asList(new Item(100.0, 1)));
        assertEquals(100.0, basket.getTotal(), 0.0);
    }
}

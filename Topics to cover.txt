TO DO LIST OF JAVA TOPICS TO COVER

Clean architecture
// todo: various software layers (database layer, UI layer)
// todo: Model-View-Controller -- is this a design pattern?

Concepts
Easy
declaration vs. initialization -- DONE
scope and variable shadowing -- DONE
casting -- DONE
// todo: widening/upcasting, no cast needed (large primitive type value accommodates smaller primitive type value; superclass accommodates subclass)
// todo: narrowing/downcasting, cast needed (shrinking a large primitive type value into a smaller primitive type value; shrink superclass into subclass)
// source: https://www.decodejava.com/widening-and-narrowing-in-java.htm#:~:text=Widening%20takes%20place%20when%20a,reference%20variable%20of%20its%20superclass
packages -- DONE FOR NOW
access modifiers (e.g. private, protected, package private, public) -- DONE

Medium
basic object oriented programming (e.g. classes, objects, attributes, methods, this, etc.) -- DONE
// todo: objects determine their own state and behaviour
constructors -- DONE
getters and setters -- DONE
generics -- DONE FOR NOW
autoboxing -- DONE
unboxing -- DONE
wildcards -- DONE FOR NOW
// todo: method overloading
// todo: method overriding
// todo: method resolution
unchecked vs. checked exceptions -- DONE
// todo: user created exceptions
// todo: shallow copy vs. deep copy in terms of value and reference
// todo: coupling vs. cohesion

Hard
// todo: git -- IN PROGRESS
// todo: the perils of floating point arithmetic
// todo: lookup rules from csc207h1
iterators -- DONE FOR NOW
// todo: what is a spliterator?


Constructs
Easy
hello world, println -- DONE
primitive types vs. object types -- DONE
arithmetic operations (+, -, *, / which is integer division, %) -- DONE
augmented assignment (+=, -=, *=, /=, %=, &=, |=, ^=, <<=, >>=) -- DONE
bitwise operations (|, ^, >>, <<) -- DONE FOR NOW
comparison operators (<, <=, >, >=, !=, ==) -- DONE
logical operators (&&, ||, !) -- DONE
conditional (if-elseif-else) statements -- DONE
ternary if-statements -- DONE
pre-increment vs. post-increment operators -- DONE
switch statements -- DONE
for loops -- DONE
foreach loops -- DONE
while loops -- DONE
do while loops -- DONE
break -- DONE FOR NOW
continue -- DONE FOR NOW
final (classes, methods, variables, has no effect on static, conflicts with interface and abstract) -- DONE
date library -- DONE
math library -- DONE
user input -- DONE

Medium
// todo: super()
// todo: instanceof
// todo: inner classes
// todo: enums
try-catch-finally statements -- DONE
// todo: comparator function

Hard
// todo: abstract classes (deadly diamond of death for multiple inheritance)
// todo: interfaces (a workaround for lack of multiple inheritance)
// todo: static (classes, methods, variables)
// todo: regex

(Built-in) data structures
Basic
java built in arrays -- DONE
object -- DONE FOR NOW
string vs. string builder -- DONE FOR NOW
string equality vs. string ==  -- DONE FOR NOW

Collections Framework
arraylist -- DONE
linkedlist -- DONE
hashset -- DONE
stack -- DONE FOR NOW
// todo: queue
// todo: priority queue
// todo: dequeue (double ended queue)
// todo: treeset

Maps Framework
hashmap -- DONE
// todo: treemap

Custom Data Structures
// todo: graphs
// todo: tries
// todo: trees
// todo: binary trees
// todo: binary search trees
// todo: avl trees
// todo: red black trees
// todo: b/b+ trees
// todo: minimum spanning trees
// todo: doubly linked list
// todo: circular linked list
// todo: hashtables
// todo: priority queues, heaps
// todo: binomial heaps
// todo: fibonacci heaps

Design patterns
Creational
// todo: factory
// todo: abstract factory
// todo: builder
// todo: singleton

Structural
// todo: adapter
// todo: facade
// todo: dependency injection

Behavioural
// todo: iterator
// todo: observer
// todo: strategy

OOP design principles
// todo: abstraction
// todo: encapsulation
// todo: inheritance w/ UML diagrams! CRC cards.
polymorphism -- DONE

Refactoring techniques (code craftmanship techniques)
// todo: extract method
// todo: guard clause
// todo: polymorphism to replace conditional

SOLID principles <-- is SOLID a design pattern?
// todo: single responsibility principle
// todo: open closed principle
// todo: liskov substitution principle
// todo: interface segregation principle
// todo: dependency injection principle

Software Testing
// todo: JUnit basics, importance of testing
// todo: development environment vs. production environment
// todo: setUp, tearDown methods
// todo: mocks, test doubles, stubs, etc.
// todo: CI/CD
// todo: unittests
// todo: UI tests
// todo: integration tests
// todo: test driven development
// todo: behaviour driven development

Other Topics:
// todo: GUI design
// todo: reading CSV files
reading txt files -- DONE
// todo: writing txt files
// todo: creating txt files
// todo: deleting txt files
// todo: reading excel files
// todo: xml, json
// todo: java threads (e.g. "synchronized" keyword)
// todo: serialization (e.g. transient, volatile keywords)
recursion -- DONE
dynamic programming -- DONE FOR NOW
// todo: reflections
// todo: intro to android programming (e.g. event listeners)
// todo: database connections
// todo: REST api, api development

Interview Problems
// todo: preorder, inorder, postorder tree traversal
// todo: sliding window algorithm
// todo: two converging pointers algorithm
// todo: floyd's cycle detection algorithm -- fast and slow pointer
// todo: reversing a linked list -- iterative and recursive
// todo: recursive staircase problem -- iterative, recursive, and DP
// todo: knapsack problem -- iterative, recursive, and DP
// todo: lonely integer
// todo: balanced parentheses using stacks
// todo: two stacks as a queue problem
// todo: number of paths in a maze  -- iterative, recursive, and DP -- IN PROGRESS
// todo: shortest path on a graph -- BFS
// todo: how to make change -- DP
// todo: find contacts using a trie
// todo: connected components on a graph -- DFS
// todo: sort array with comparator function
// todo: find sum of two integers in array
// todo: largest subsequence sum
// todo: largest subarray sum
// todo: contiguous subarray sum
// todo: invert binary tree
// todo: find anagram
// todo: edit distance -- iterative, recursive, DP
// todo: running median using heaps/priority queues
// todo: count inversions -- using mergesort

Algorithms
// todo: linear search, binary search, iterative and recursive
// todo: traditional comparison-based sorting algorithms (e.g. bubble, selection, insertion, quicksort, mergesort, timsort, heapsort, treesort)
// todo: other comparison-based sorting algorithms (e.g. bogosort, 3-way quicksort, cocktailsort, odd-even sort, pancakesort)
// todo: non-comparison-based sorting algorithms (e.g. radix, counting, bucket, pigeonhole)
// todo: bfs
// todo: dfs
// todo: depth limited dfs
// todo: uniform cost search
// todo: best first search
// todo: djistrka's algorithm
// todo: prim's mst algorithm
// todo: kruskal's mst algorithm
// todo: topological sort

JAVA SYLLABUS

Constructs

Easy
hello world, println -- DONE
primitive types vs. object types -- DONE
arithmetic operations (+, -, *, / which is integer division, %) -- DONE
augmented assignment (+=, -=, *=, /=, %=, &=, |=, ^=, <<=, >>=) -- DONE
bitwise operations (|, ^, >>, <<) -- DONE FOR NOW
comparison operators (<, <=, >, >=, !=, ==) -- DONE
logical operators (&&, ||, !) -- DONE
conditional (if-elseif-else) statements -- DONE
ternary if-statements -- DONE
pre-increment vs. post-increment operators -- DONE
switch statements -- DONE
for loops -- DONE
foreach loops -- DONE
while loops -- DONE
do while loops -- DONE
break -- DONE FOR NOW
continue -- DONE FOR NOW
instanceof -- DONE

Medium
super() -- DONE
inner classes -- DONE
enums -- DONE FOR NOW
static (methods, variables) -- DONE
final -- DONE
virtual -- DONE FOR NOW
try-catch-finally statements -- DONE
comparator class -- DONE

Hard
abstract classes -- DONE FOR NOW
deadly diamond of death for multiple inheritance -- DONE FOR NOW
interfaces -- DONE FOR NOW
// todo: regex


Concepts
Easy
declaration vs. initialization -- DONE
scope and variable shadowing -- DONE
casting -- DONE
widening/upcasting, no cast needed
narrowing/downcasting, cast needed
packages -- DONE FOR NOW
access modifiers (e.g. private, protected, package private, public) -- DONE

Medium
basic object oriented programming (e.g. classes, objects, attributes, methods, this, etc.) -- DONE
constructors -- DONE
getters and setters -- DONE
generics -- DONE FOR NOW
autoboxing -- DONE
unboxing -- DONE
wildcards -- DONE FOR NOW
method overloading -- DONE FOR NOW
method overriding -- DONE FOR NOW
method resolution -- DONE FOR NOW
pass by value vs. pass by reference -- DONE
unchecked vs. checked exceptions -- DONE
user created exceptions -- DONE
shallow copy vs. deep copy in terms of value and reference -- DONE FOR NOW

Hard
git -- DONE FOR NOW
// todo: the perils of floating point arithmetic
lookup rules -- DONE
iterators -- DONE FOR NOW
// todo: spliterators
coupling -- DONE FOR NOW
// todo: cohesion


Data Structures
Built in Data Structures
java built in arrays -- DONE
object -- DONE FOR NOW
string vs. string builder -- DONE FOR NOW
string equality vs. string ==  -- DONE FOR NOW

Collections Framework
arraylist -- DONE
linkedlist -- DONE
hashset -- DONE
stack -- DONE FOR NOW
queue -- DONE FOR NOW
priority queue -- DONE FOR NOW
dequeue (double ended queue) -- DONE FOR NOW
treeset -- DONE FOR NOW

Maps Framework
hashmap -- DONE
treemap -- DONE FOR NOW

Custom Data Structures
stacks -- DONE
queues -- DONE
// todo: trees
// todo: binary trees
binary search trees -- DONE FOR NOW
tries -- DONE!
graphs with adjacency list -- DONE FOR NOW
graphs with adjacency matrix with 2d array -- DONE FOR NOW
graphs with adjacency matrix with nested hashtable -- DONE FOR NOW
// todo: minimum spanning trees
heaps -- DONE FOR NOW
singly linked list -- DONE FOR NOW
doubly linked list -- DONE FOR NOW
singly circular linked list -- DONE FOR NOW
doubly circular linked list -- DONE FOR NOW
// todo: hashtables with closed addressing -- chaining
// todo: hashtables with open addressing -- linear probing, quadratic probing, double hashing
// todo: binomial heaps
// todo: fibonacci heaps
// todo: avl trees
// todo: red black trees
// todo: b/b+ trees
// todo: splay trees
dynamic arrays -- DONE
// todo: skip list
// todo: huffman trees
disjoint sets with singly circular linked list -- DONE FOR NOW
disjoint sets with doubly circular linked list -- DONE FOR NOW
disjoint sets with singly linked list with extra pointers to head -- DONE FOR NOW
disjoint sets with singly linked list with extra pointers to head and union by rank -- DONE FOR NOW
disjoint sets with trees -- DONE FOR NOW
disjoint sets with trees and union by rank -- DONE FOR NOW
disjoint sets with trees and path compression -- DONE FOR NOW
disjoint sets with trees and both union by rank and path compression -- DONE FOR NOW
// todo: indexed priority queues


OOP design principles
// todo: abstraction
encapsulation -- DONE FOR NOW
inheritance -- DONE FOR NOW
// todo: inheritance w/ UML diagrams! CRC cards.
// todo: composition (objects inside other objects, possibly themselves)
polymorphism -- DONE


SOLID principles <-- is SOLID a design pattern?
// todo: single responsibility principle
// todo: open closed principle
// todo: liskov substitution principle
// todo: interface segregation principle
// todo: dependency inversion principle

Clean architecture
// todo: various software layers (database layer, UI layer)
// todo: Model-View-Controller -- is this a design pattern?


Design patterns
Creational
// todo: factory
// todo: abstract factory
// todo: builder
// todo: singleton

Structural
// todo: adapter
// todo: facade
// todo: dependency injection

Behavioural
// todo: iterator
// todo: observer
// todo: strategy


Refactoring techniques (code craftmanship techniques)
refactoring -- DONE
code smells -- DONE

Creation Problems
replacing constructors with creation methods -- DONE
eliminating duplicate constructors by chaining constructors -- DONE

Composing Methods
extract method -- DONE
make method inline -- DONE
eliminate unnecessary local variables -- DONE
remove temporary variable -- DONE
replace temporary variable with query -- DONE
use explaining variables -- DONE
extract class -- DONE

Other
replacing constructors with factory methods -- DONE FOR NOW
replacing constructors with singletons -- DONE FOR NOW
replacing conditional statements with guard clause -- DONE
using polymorphism to replace if-statement -- DONE
polymorphism to replace switch statement -- DONE
replacing constructors with strategy pattern -- DONE FOR NOW

eliminating duplicate code with the template pattern -- DONE FOR NOW
replacing implied primitive trees with the composite pattern -- DONE FOR NOW

using the builder pattern to build composite objects -- DONE FOR NOW
eliminating large accumulation methods by extracting methods and using a collecting parameter -- DONE FOR NOW

using the adapter pattern to match incompatible interfaces -- DONE FOR NOW
using the decorator pattern to add embellishments to existing classes -- DONE FOR NOW
using the visitor pattern to add new functionality -- DONE FOR NOW

using the abstract factory pattern to build different types of objects -- DONE FOR NOW

Software Testing
JUnit basics -- DONE
// todo: importance of testing
// todo: development environment vs. production environment
// todo: setUp, tearDown methods
// todo: mocks, test doubles, stubs, etc.
// todo: CI/CD
// todo: unittests
// todo: UI tests
// todo: integration tests
test driven development -- DONE FOR NOW
behaviour driven development -- DONE FOR NOW


Algorithms

Comparison-Based Sorting Algorithms
iterative bubble sort -- DONE
recursive bubble sort -- DONE
iterative selection sort -- DONE
recursive selection sort -- DONE
iterative insertion sort -- DONE
recursive insertion sort -- DONE
in-place recursive quicksort -- DONE
out-of-place recursive quicksort -- DONE
iterative quicksort -- DONE
in-place recursive mergesort -- DONE
out-of-place recursive mergesort -- DONE
iterative mergesort -- DONE
// todo: timsort
// todo: heapsort (e.g. O(nlogn) build heap version vs. O(n) build heap version)
// todo: treesort (e.g. using n insertions into BST and then inorder traversal)

Other Comparison-Based Sorting Algorithms
bogosort -- DONE
// todo: 3-way quicksort
// todo: cocktailsort
// todo: odd-even sort
// todo: pancakesort

Non-Comparison-Based Sorting Algorithms
radix sort -- DONE
counting sort -- DONE
// todo: bucket sort
// todo: pigeonhole sort
// todo: bead sort
// todo: cube sort

Array Search Algorithms
iterative linear search -- DONE
recursive linear search -- DONE
iterative binary search -- DONE
recursive binary search -- DONE

Graph Algorithms
breadth first search -- DONE!
depth first search -- DONE!
// todo: depth limited dfs
// todo: uniform cost search
// todo: best first search
// todo: bidirectional search
// todo: dijkstra's algorithm
// todo: bellman-ford algorithm
// todo: floyd-warshall algorithm
// todo: topological sort
// todo: minimax algorithm
// todo: alpha beta pruning
// todo: A* algorithm
// todo: backtracking search

MST Algorithms
// todo: prim's mst algorithm
// todo: kruskal's mst algorithm


Interview Problems
fizzfuzz -- DONE
// todo: preorder, inorder, postorder tree traversal
// todo: sliding window algorithm
// todo: two converging pointers algorithm
is BST -- DONE!
cycle detection -- fast and slow pointer/floyd's algorithm -- DONE!
cycle detection -- hashset -- DONE!
reversing a linked list -- iterative -- DONE FOR NOW
reversing a linked list -- DONE FOR NOW
recursive staircase problem -- recursive -- DONE!
recursive staircase problem -- using DP -- DONE!
recursive staircase problem -- iterative -- DONE!
// todo: integer knapsack problem -- recursive
// todo: integer knapsack problem -- using DP
// todo: integer knapsack problem -- iterative
// todo: fractional knapsack problem -- recursive
// todo: fractional knapsack problem -- using DP
// todo: fractional knapsack problem -- iterative
ice cream parlour problem -- using hashtable -- DONE!
lonely integer -- using bit manipulation -- DONE!
balanced parentheses -- using stacks -- DONE!
queue using two stacks problem -- DONE!
number of paths in a maze -- recursive -- DONE!
number of paths in a maze -- using DP -- DONE!
// todo: number of paths in a maze -- iterative
shortest path between two vertices in a graph -- using BFS -- DONE!
how to make change -- recursive -- DONE!
how to make change -- using DP -- DONE!
// todo: how to make change  -- iterative
// todo: viterbi's algorithm -- recursive
// todo: viterbi's algorithm -- using DP
// todo: viterbi's algorithm -- iterative?
// todo: find contacts -- using a trie
// todo: connected components on a graph -- using DFS
sort array -- using a comparator function -- DONE!
find sum of two integers in array with target sum -- DONE!
// todo: largest subsequence sum
// todo: largest subarray sum
// todo: contiguous subarray sum
// todo: invert binary tree
can build ransom note -- DONE!
find anagram -- using hashtable -- DONE!
// todo: edit distance -- recursive
// todo: edit distance -- using DP
// todo: edit distance -- iterative
running median -- using heaps/priority queues -- DONE!
// todo: count inversions -- using mergesort
// todo: lossless file compression/decompression -- using huffman trees


Other Topics:
// todo: GUI design
// todo: reading CSV files
reading txt files -- DONE
// todo: writing txt files
// todo: creating txt files
// todo: deleting txt files
// todo: reading excel files
// todo: xml, json
// todo: java threads (e.g. "synchronized" keyword)
// todo: serialization (e.g. transient, volatile keywords)
recursion -- DONE
dynamic programming -- DONE FOR NOW
// todo: reflections
// todo: intro to android programming (e.g. event listeners)
// todo: intro to kotlin
// todo: REST api, api development
// todo: java streams API
// todo: string pool


Java Libraries
date library -- DONE
math library -- DONE
user input (scanner) -- DONE
// todo: intro to java machine learning libraries
// todo: intro to java AI libraries
// todo: intro to JDBC library (e.g. database connections)

TO DO LIST OF TOPICS TO COVER

Java clean architecture
// todo: various software layers
// todo: Model-View-Controller -- is this a design pattern?

Java concepts
Easy
casting -- DONE
primitive types vs. object types -- DONE!
declaration vs. initialization -- DONE!
// todo: scope
// todo: pre-increment vs. post-increment operators
// todo: accessibility modifiers (e.g. private, protected, package private, public)
// todo: recursion

Medium
// todo: constructors
// todo: getters and setters
// todo: instanceof
// todo: static classes, static methods, static variables
// todo: lookup rules from csc207h1
// todo: shallow copy vs. deep copy in terms of value and reference
// todo: variable shadowing
// todo: unchecked vs. checked exceptions
// todo: git -- IN PROGRESS

Hard
// todo: autoboxing, unboxing
// todo: generics
// todo: method overloading
// todo: method overriding
iterators -- DONE FOR NOW
// todo: what is a spliterator?
// todo: java threads and "synchronized" keyword
// todo: floating point arithmetic


Java constructs
Easy
hello world, println -- DONE
// todo: comparison operators (<, <=, >, >=, !=, ==)
// todo; logical operators (and, or, not)
// todo: modulus operator (%)
// todo: final (for constants)
conditional (if-elseif-else) statements -- DONE
ternary if-statements -- DONE
switch statements -- DONE
for loops -- DONE
foreach loops -- DONE
while loops -- DONE
do while loops -- DONE
// todo: break
// todo: continue
// todo: date library
// todo: math library

Medium
// todo: enums
// todo: inner classes
user input -- DONE
string vs. string builder -- DONE FOR NOW
string equality vs. string ==  -- DONE FOR NOW
// todo: try-catch-finally statements
// todo: this
// todo: object oriented programming
// todo: super()

Hard
// todo: abstract classes vs. interfaces
// todo: comparator function
// todo: regex

Java built-in data structures
Easy
arraylist -- DONE
linkedlist -- DONE
java built in arrays -- DONE

Medium
hashmap -- DONE
stack -- DONE FOR NOW
// todo: queue
// todo: hashset
// todo: treeset

Java design patterns
Creational
// todo: factory
// todo: abstract factory
// todo: builder
// todo: singleton

Structural
// todo: adapter
// todo: facade

Behavioural
// todo: iterator
// todo: observer
// todo: strategy

Java OOP design principles
// todo: abstraction
// todo: encapsulation
// todo: inheritance w/ UML diagrams! CRC cards.
polymorphism -- DONE

Java refactoring techniques
// todo: extract method
// todo: guard clause
// todo: polymorphism to replace conditional

Java SOLID principles <-- is SOLID a design pattern?
// todo: single responsibility principle
// todo: open closed principle
// todo: liskov substitution principle
// todo: interface segregation principle
// todo: dependency injection principle

Other:
// todo: GUI design
// todo: reading CSV files
reading txt files -- DONE!
// todo: writing txt files
// todo: creating txt files
// todo: deleting txt files

I added all of my progress from Day 3 (May 24, 2021).


JAVA SYLLABUS

Constructs

Easy
hello world, println -- DONE
primitive types vs. object types -- DONE
arithmetic operations (+, -, *, / which is integer division, %) -- DONE
augmented assignment (+=, -=, *=, /=, %=, &=, |=, ^=, <<=, >>=) -- DONE
bitwise operations (|, ^, >>, <<) -- DONE FOR NOW
comparison operators (<, <=, >, >=, !=, ==) -- DONE
logical operators (&&, ||, !) -- DONE
conditional (if-elseif-else) statements -- DONE
ternary if-statements -- DONE
pre-increment vs. post-increment operators -- DONE
switch statements -- DONE
for loops -- DONE
foreach loops -- DONE
while loops -- DONE
do while loops -- DONE
break -- DONE FOR NOW
continue -- DONE FOR NOW
final -- DONE
instanceof -- DONE

Medium
super() -- DONE
inner classes -- DONE
// todo: enums
try-catch-finally statements -- DONE
// todo: comparator function

Hard
static (methods, variables) -- DONE
// todo: virtual
// todo: abstract classes (deadly diamond of death for multiple inheritance)
// todo: interfaces (a workaround for lack of multiple inheritance)
// todo: regex


Concepts
Easy
declaration vs. initialization -- DONE
scope and variable shadowing -- DONE
casting -- DONE
widening/upcasting, no cast needed
narrowing/downcasting, cast needed
packages -- DONE FOR NOW
access modifiers (e.g. private, protected, package private, public) -- DONE

Medium
basic object oriented programming (e.g. classes, objects, attributes, methods, this, etc.) -- DONE  // todo: objects determine their own state and behaviour
constructors -- DONE
getters and setters -- DONE
generics -- DONE FOR NOW
autoboxing -- DONE
unboxing -- DONE
wildcards -- DONE FOR NOW
method overloading -- DONE FOR NOW
method overriding -- DONE FOR NOW
method resolution -- DONE FOR NOW
pass by value vs. pass by reference -- DONE
unchecked vs. checked exceptions -- DONE
// todo: user created exceptions
shallow copy vs. deep copy in terms of value and reference -- DONE FOR NOW

Hard
// todo: git -- IN PROGRESS
// todo: the perils of floating point arithmetic
// todo: lookup rules from csc207h1
iterators -- DONE FOR NOW
// todo: what is a spliterator?
// todo: coupling
// todo: cohesion


Data Structures
Built in Data Structures
java built in arrays -- DONE
object -- DONE FOR NOW
string vs. string builder -- DONE FOR NOW
string equality vs. string ==  -- DONE FOR NOW

Collections Framework
arraylist -- DONE
linkedlist -- DONE
hashset -- DONE
stack -- DONE FOR NOW
queue -- DONE FOR NOW
priority queue -- DONE FOR NOW
dequeue (double ended queue) -- DONE FOR NOW
// todo: treeset

Maps Framework
hashmap -- DONE
// todo: treemap

Custom Data Structures
// todo: trees
// todo: binary trees
// todo: binary search trees
// todo: tries
// todo: graphs
// todo: minimum spanning trees
heaps -- DONE FOR NOW
// todo: doubly linked list
// todo: circular linked list
// todo: hashtables
// todo: binomial heaps
// todo: fibonacci heaps
// todo: avl trees
// todo: red black trees
// todo: b/b+ trees


OOP design principles
// todo: abstraction
encapsulation -- DONE FOR NOW
inheritance -- DONE FOR NOW
// todo: inheritance w/ UML diagrams! CRC cards.
// todo: composition (objects inside other objects, possibly themselves)
polymorphism -- DONE


SOLID principles <-- is SOLID a design pattern?
// todo: single responsibility principle
// todo: open closed principle
// todo: liskov substitution principle
// todo: interface segregation principle
// todo: dependency inversion principle

Clean architecture
// todo: various software layers (database layer, UI layer)
// todo: Model-View-Controller -- is this a design pattern?


Design patterns
Creational
// todo: factory
// todo: abstract factory
// todo: builder
// todo: singleton

Structural
// todo: adapter
// todo: facade
// todo: dependency injection

Behavioural
// todo: iterator
// todo: observer
// todo: strategy


Refactoring techniques (code craftmanship techniques)
// todo: extract method
// todo: guard clause
// todo: polymorphism to replace conditional
// todo: polymorphism to replace switch statement


Software Testing
// todo: JUnit basics, importance of testing
// todo: development environment vs. production environment
// todo: setUp, tearDown methods
// todo: mocks, test doubles, stubs, etc.
// todo: CI/CD
// todo: unittests
// todo: UI tests
// todo: integration tests
// todo: test driven development
// todo: behaviour driven development


Algorithms

Comparison-Based Sorting Algorithms
iterative bubble sort -- DONE
recursive bubble sort -- DONE
iterative selection sort -- DONE
recursive selection sort -- DONE
iterative insertion sort -- DONE
recursive insertion sort -- DONE
in-place recursive quicksort -- DONE
out-of-place recursive quicksort -- DONE
iterative quicksort -- DONE
in-place recursive mergesort -- DONE
out-of-place recursive mergesort -- DONE
iterative mergesort -- DONE
// todo: timsort
// todo: heapsort
// todo: treesort

Other Comparison-Based Sorting Algorithms
bogosort -- DONE
// todo: 3-way quicksort
// todo: cocktailsort
// todo: odd-even sort
// todo: pancakesort

Non-Comparison-Based Sorting Algorithms
radix sort -- DONE
counting sort -- DONE
// todo: bucket sort
// todo: pigeonhole sort

Array Search Algorithms
iterative linear search -- DONE
recursive linear search -- DONE
iterative binary search -- DONE
recursive binary search -- DONE

Graph Algorithms
// todo: bfs
// todo: dfs
// todo: depth limited dfs
// todo: uniform cost search
// todo: best first search
// todo: dijkstra's algorithm
// todo: topological sort

MST Algorithms
// todo: prim's mst algorithm
// todo: kruskal's mst algorithm


Interview Problems
// todo: preorder, inorder, postorder tree traversal
// todo: sliding window algorithm
// todo: two converging pointers algorithm
// todo: floyd's cycle detection algorithm -- fast and slow pointer
// todo: reversing a linked list -- iterative and recursive
// todo: recursive staircase problem -- iterative, recursive, and DP
// todo: knapsack problem -- iterative, recursive, and DP
// todo: lonely integer
// todo: balanced parentheses using stacks
// todo: two stacks as a queue problem
// todo: number of paths in a maze  -- iterative, recursive, and DP -- IN PROGRESS
// todo: shortest path on a graph -- BFS
// todo: how to make change -- DP
// todo: find contacts using a trie
// todo: connected components on a graph -- DFS
// todo: sort array with comparator function
// todo: find sum of two integers in array
// todo: largest subsequence sum
// todo: largest subarray sum
// todo: contiguous subarray sum
// todo: invert binary tree
// todo: find anagram
// todo: edit distance -- iterative, recursive, DP
// todo: running median using heaps/priority queues
// todo: count inversions -- using mergesort


Other Topics:
// todo: GUI design
// todo: reading CSV files
reading txt files -- DONE
// todo: writing txt files
// todo: creating txt files
// todo: deleting txt files
// todo: reading excel files
// todo: xml, json
// todo: java threads (e.g. "synchronized" keyword)
// todo: serialization (e.g. transient, volatile keywords)
recursion -- DONE
dynamic programming -- DONE FOR NOW
// todo: reflections
// todo: intro to android programming (e.g. event listeners)
// todo: intro to kotlin
// todo: REST api, api development
// todo: java streams API
// todo: string pool


Java Libraries
date library -- DONE
math library -- DONE
user input (scanner) -- DONE
// todo: intro to java machine learning libraries
// todo: intro to java AI libraries
// todo: intro to JDBC library (e.g. database connections)
